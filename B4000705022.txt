module CalcApp {
    interface Calc {
        long add(in long a, in long b);
        long sub(in long a, in long b);
    };
};
CalcApp

package CalcApp;

public class CalcImpl extends CalcPOA {
    public int add(int a, int b) {
        return a + b;
    }

    public int sub(int a, int b) {
        return a - b;
    }
}

package CalcApp;

import org.omg.CORBA.*;
import org.omg.PortableServer.*;
import org.omg.CosNaming.*;

public class Server {
    public static void main(String[] args) {
        try {
            ORB orb = ORB.init(args, null);
            POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootPOA.the_POAManager().activate();

            CalcImpl calcImpl = new CalcImpl();
            org.omg.CORBA.Object ref = rootPOA.servant_to_reference(calcImpl);
            Calc href = CalcHelper.narrow(ref);

            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

            NameComponent path[] = ncRef.to_name("Calc");
            ncRef.rebind(path, href);

            System.out.println("Server ready and waiting...");
            orb.run();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


package CalcApp;

import org.omg.CORBA.*;
import org.omg.CosNaming.*;

public class Client {
    public static void main(String[] args) {
        try {
            ORB orb = ORB.init(args, null);
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

            Calc calcImpl = CalcHelper.narrow(ncRef.resolve_str("Calc"));

            System.out.println("Result of 5 + 3 = " + calcImpl.add(5, 3));
            System.out.println("Result of 10 - 4 = " + calcImpl.sub(10, 4));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


Create the codes as per my GitHub

1) Open terminal navigate to your project and then do cd bin
2) Type command - mpjrun.bat -np 4 -classpath ".;C:\mpj-v0_44\lib\mpj.jar" ArraySumMPI (For Windows)
3) And for Ubuntu Linux terminal use this - mpjrun.sh -np 4 ArraySumMPI (file name)